/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LIST_H
#define _MOCK_LIST_H

#include "list.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_list_Init(void);
void mock_list_Destroy(void);
void mock_list_Verify(void);


typedef void*(*cmock_list_func_ptr1)(size_t);
typedef void(*cmock_list_func_ptr2)(void*);
typedef void(*cmock_list_func_ptr3)(void*, void*);
typedef char(*cmock_list_func_ptr4)(void*, void*);


#define list_init_IgnoreAndReturn(cmock_retval) list_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void list_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, list_t* cmock_to_return);
#define list_init_ExpectAndReturn(list_malloc, list_free, cmock_retval) list_init_CMockExpectAndReturn(__LINE__, list_malloc, list_free, cmock_retval)
void list_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, cmock_list_func_ptr1 list_malloc, cmock_list_func_ptr2 list_free, list_t* cmock_to_return);
typedef list_t* (* CMOCK_list_init_CALLBACK)(cmock_list_func_ptr1 list_malloc, cmock_list_func_ptr2 list_free, int cmock_num_calls);
void list_init_StubWithCallback(CMOCK_list_init_CALLBACK Callback);
#define list_destroy_Ignore() list_destroy_CMockIgnore()
void list_destroy_CMockIgnore(void);
#define list_destroy_Expect(list) list_destroy_CMockExpect(__LINE__, list)
void list_destroy_CMockExpect(UNITY_LINE_TYPE cmock_line, list_t* list);
typedef void (* CMOCK_list_destroy_CALLBACK)(list_t* list, int cmock_num_calls);
void list_destroy_StubWithCallback(CMOCK_list_destroy_CALLBACK Callback);
#define list_add_Ignore() list_add_CMockIgnore()
void list_add_CMockIgnore(void);
#define list_add_Expect(list, element) list_add_CMockExpect(__LINE__, list, element)
void list_add_CMockExpect(UNITY_LINE_TYPE cmock_line, list_t* list, void* element);
typedef void (* CMOCK_list_add_CALLBACK)(list_t* list, void* element, int cmock_num_calls);
void list_add_StubWithCallback(CMOCK_list_add_CALLBACK Callback);
#define list_remove_Ignore() list_remove_CMockIgnore()
void list_remove_CMockIgnore(void);
#define list_remove_Expect(list, element) list_remove_CMockExpect(__LINE__, list, element)
void list_remove_CMockExpect(UNITY_LINE_TYPE cmock_line, list_t* list, void* element);
typedef void (* CMOCK_list_remove_CALLBACK)(list_t* list, void* element, int cmock_num_calls);
void list_remove_StubWithCallback(CMOCK_list_remove_CALLBACK Callback);
#define list_foreach_Ignore() list_foreach_CMockIgnore()
void list_foreach_CMockIgnore(void);
#define list_foreach_Expect(list, process_func, context) list_foreach_CMockExpect(__LINE__, list, process_func, context)
void list_foreach_CMockExpect(UNITY_LINE_TYPE cmock_line, list_t* list, cmock_list_func_ptr3 process_func, void* context);
typedef void (* CMOCK_list_foreach_CALLBACK)(list_t* list, cmock_list_func_ptr3 process_func, void* context, int cmock_num_calls);
void list_foreach_StubWithCallback(CMOCK_list_foreach_CALLBACK Callback);
#define list_get_at_index_IgnoreAndReturn(cmock_retval) list_get_at_index_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void list_get_at_index_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define list_get_at_index_ExpectAndReturn(list, index, cmock_retval) list_get_at_index_CMockExpectAndReturn(__LINE__, list, index, cmock_retval)
void list_get_at_index_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, list_t* list, unsigned int index, void* cmock_to_return);
typedef void* (* CMOCK_list_get_at_index_CALLBACK)(list_t* list, unsigned int index, int cmock_num_calls);
void list_get_at_index_StubWithCallback(CMOCK_list_get_at_index_CALLBACK Callback);
#define list_search_IgnoreAndReturn(cmock_retval) list_search_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void list_search_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, void* cmock_to_return);
#define list_search_ExpectAndReturn(list, key_comparator, key, cmock_retval) list_search_CMockExpectAndReturn(__LINE__, list, key_comparator, key, cmock_retval)
void list_search_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, list_t* list, cmock_list_func_ptr4 key_comparator, void* key, void* cmock_to_return);
typedef void* (* CMOCK_list_search_CALLBACK)(list_t* list, cmock_list_func_ptr4 key_comparator, void* key, int cmock_num_calls);
void list_search_StubWithCallback(CMOCK_list_search_CALLBACK Callback);
#define list_count_IgnoreAndReturn(cmock_retval) list_count_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void list_count_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define list_count_ExpectAndReturn(list, cmock_retval) list_count_CMockExpectAndReturn(__LINE__, list, cmock_retval)
void list_count_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, list_t* list, size_t cmock_to_return);
typedef size_t (* CMOCK_list_count_CALLBACK)(list_t* list, int cmock_num_calls);
void list_count_StubWithCallback(CMOCK_list_count_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
